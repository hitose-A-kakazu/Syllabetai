Syllabetai  Read Me

●アプリの概要

<<アプリのタイトルページ>>
起動画面のOKを押すと、成績を読み込む画面が出てきます。

<<ファイル選択ページ>>
Oh-meijiの成績通知表からダウンロードした個人の成績ファイルをそのままファイル選択で指定してください。
(これは後にtabulaというモジュールでcsvに変換をするのですが、文字化けや文字情報の欠損が見られ、うまく変換できない可能性が高いからです)

ファイル選択後、Oh-meijiにログインする際のご自身のパスワードを入力してください。
その後成績を読み込むボタンを押すと、プレビューが表示されます。
読み込むファイルが成績表でない場合や文字化け・文字情報の欠損が見られる場合、Errorが出ます。
その場合、次の場面以降の操作ができません。

「成績を読み込む」ボタンを押し、プレビューが表示された後、「次のページへ」ボタンを押してください。
その際、カレントデディレクトリに成績の単位習得状況のデータベースが作成されます。

<<学部/学年/学期/第二外国語の選択ページ>>
自身が所属している項目を選択してください。その後、送信ボタンを押してください。

<<授業登録ページ>>
個人用のデータベースを参照し、必修の必要単位数が足りていない項目が赤字になるように設定しています。
赤字がなければ、必修の必要単位数が足りているということになります。
赤字の項目から登録することをお勧めします。

授業の登録は、各項目のリストボックスを選択後、登録ボタンを押すと完了します。
完了すると、右にあるミニカレンダーにピンクの色がつきます。

複数の授業項目が選択できますが、読み込むのは上から順になるので、注意してください。

既に登録されている曜日と時限の項目を登録すると、重複しているためError BOXが表示されます。
その際は、異なる曜日・と時限の項目を再度選び直し登録してください。
再度選び直しをする際、先ほど選択されたリストが選択された状態のままになっているため、再度クリックし選択の解除を行ってください。

もし、選び間違えた場合は、クリアボタンを押すことで、リセットされます。

また、授業登録のページは二つありますので、Page 1 Backボタンと次へボタンを行き来しながら、授業登録できます。

授業登録を終えた場合、「登録をして確認をする」ボタンを押してください。

<<カレンダーページ>>
先ほど登録した授業が各曜日、各時限に配置されていると思います。
確認後、宜しければ「csvへ出力」ボタンを押してください。

システムが終了し、カレントディレクトリに "Syllabetai_RegisteClasses.csv" というファイルが出力されます。

*万が一、授業登録したものとカレンダーに載っているものが異なる場合は、その項目をクリックし、ご自身で修正することも可能です。

このファイルを見ながら、明治大学の授業登録のサイトで活用していただければ幸いです。
以上

●システム詳細
このアプリでは、以下のライブラリやツールが不可欠です。
インストール後、ファイルの実行を行ってください。
・tkinter
・pikepdf
・tabula
・PIL
・pathlib
・pdf2image
・os
・PyPDF2
・numpy
・pandas 
・sqlite3
・sys

＊tablueはRuby環境が必要です。
＊pdf2imageはpopperのインストールが必要です。

<<topframe.pyでの主な処理>>
アプリタイトル・copyrightの表示、OKボタン
OKボタンを押すと、frame1.pyのクラスFileread()のインスタンスを作成します。
(つまり、frame1.pyに記述されているコードが実行されます)

<<frame1.py>>
[ファイルの選択・表示]
　ファイルの選択の際、filedialog.askopenfilename()でパスを保存し表示

[パスワード解除]
　ファイルを開いた後、PyPDF2.PdfFileReaderでpdfを読み取る
　そして、pikepdfで入力されたパスワードの解除を行う
　
[pdf to csv]
　解除されたpdfをtabula.read_pdfでcsvに変換する(カレントディレクトリにseiseki.csvで保存)
　そのcsvをpandasで読み込み、空白の列・行を削除
　そして、単位習得状況の部分を抽出し、データを整える。

[個人用のデータベース作成]
　形を整えたデータフレームを個人用データベースに格納する。
　(カレントディレクトリのIndividual_Database.db)
　データベースは以下の項目に分かれている。
　　・spring12
　　・autumn12
　　・spring34
　　・autumn34

[プレビュー]
　読み込んだPDFをconvert_from_pathで画像へ変換し、jpegで保存
　Imageで画像を開き、ImageTk.PhotoImage関数を使い、create_image関数でキャンバスに描画

<<frame2.py>>
[学科などの選択]
　Radiobuttonで作成し、tkinterのStringVarに値を代入

[授業リストの表示]
　まず、StringVarに格納されている値を授業用データベース(syllabetai_database.db)から取り出す年次,学期のデータを決めている。(access_database関数)

　そして、それぞれの項目のフレームやラベル、ボタンを作成する際に、授業用データベースにアクセスし、カテゴリーにあった授業のリストを取り出している。(extract関数)

　そして、個人用のデータベースを参照し、必要単位数に満たない科目があるラベルが赤字になるようにしている。(not_enough_credits関数)

[授業が選択された時の処理]
　授業が選択されるとselect関数の処理に移る。
　複数選択があり得るため、for文で一つずつ上から順に処理を行う。
　まず選択された授業のテキストのconnection_key(集中講義の場合同じ値を入れている)を参照し、授業用データから同じ値の授業テキストを取り出す。
　そして、それらのテキストの曜日・時限がすでに選択されているかの判定をcheck_duplication関数で行う。

　そして、重複している場合は、messageboxでエラーの表示を行う。
　重複していない場合は、selectedに格納される
　そして、登録されたテキストの曜日と時限に該当するミニカレンダーの場所を色付けする。(ミニカレンダーの作成と色付け)
　

[ページ戻る、次へボタン、登録して確認ボタン]
　登録して確認するボタン：frame3.pyにselected(登録された授業リスト)を投げる
　次へボタン：create_display_second_frame関数で、self.display_second_frameを作成
　戻るボタン：tkraiseでフレームを最上層にする
　クリアボタン：selectedの初期化、miniカレンダーの初期化、フレームの初期化を行っている。
　page1bakボタン：self.display_second_frame.grid_forget()し、
                self.display_first_frame.tkraise()する

<<frame3.py>>
[各曜日・各時限に選択された授業リストを配置]
　選択された授業リストのデータフレーム化し、各曜日、各時限に配置している。

[csvボタン]
　データフレーム化した選択された授業リストをcsvへ出力
　

















